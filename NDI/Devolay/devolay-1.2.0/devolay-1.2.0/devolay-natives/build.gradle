import org.gradle.internal.jvm.Jvm

import java.nio.file.Files

plugins {
    id 'cpp-library'
}

library {
    binaries.configureEach {
        // Force the CPP library to build C instead
        def compileTask = compileTask.get()
        def linkExecutable = linkTask.get()
        //compileTask.source.from fileTree(dir: "src/main/c", include: "*\*\/*.c")

        if (toolChain instanceof VisualCpp) {
            compileTask.compilerArgs.add("/std:c++latest")
        } else if (toolChain instanceof GccCompatibleToolChain) {
            compileTask.compilerArgs.add("-std=c++17")
            compileTask.compilerArgs.add("-lstdc++fs")

            compileTask.compilerArgs.add("-static")

            //linkExecutable.linkerArgs.add("-lstdc++fs")
        }
    }
}

assemble {
    dependsOn ":devolay-java:generateJniHeaders"
}

// Include the JNI headers and link/include the NDI(tm) SDK
components.main.binaries.whenElementFinalized { binary ->
    project.dependencies {
        System.out.println("Including JNI Path")
        //Thread.sleep(1000 * 10)
        def javaIndludes = Jvm.current().javaHome.toPath().resolve("include")
        //System.out.println(javaIndludes)
        add(binary.includePathConfiguration.name, files(javaIndludes))
        
        for(java.nio.file.Path child : Files.newDirectoryStream(javaIndludes, { path -> Files.isDirectory(path) })) {
            add(binary.includePathConfiguration.name, files(child))
        }
        
        System.out.println("Linking/Including NDI(tm) SDK Path")
        
        if(System.getenv("NDI_SDK_DIR") == null) {
            throw new IllegalStateException("NDI SDK not found: NDI_SDK_DIR environment variable does not exist.")
        }

        def ndiSdkPath = file(System.getenv("NDI_SDK_DIR")).toPath();
        def ndiIncludePath

        if(Files.exists(ndiSdkPath.resolve("Include"))) {
            ndiIncludePath = ndiSdkPath.resolve("Include")
        } else if(Files.exists(ndiSdkPath.resolve("include"))) {
            ndiIncludePath = ndiSdkPath.resolve("include")
        } else {
            throw new IllegalStateException("Could not find NDI Include folder. Check your NDI install and your NDI_SDK_DIR environment variable.")
        }
        
        def architectureName = binary.getTargetPlatform().getTargetMachine().getArchitecture().getName() 
        
        if(architectureName == MachineArchitecture.X86) {
            def ndiLibPath = OperatingSystem.current().getSharedLibraryName(ndiSdkPath.resolve("Lib").resolve("x86"))
        } else if (architectureName == MachineArchitecture.X86_64) {
            def ndiLibPath = ndiSdkPath.resolve("Lib").resolve("x64")
        } else {
            throw new GradleException("Unknown target platform: " + architectureName)
        }
        
        add(binary.includePathConfiguration.name, files(ndiIncludePath));
    }
}
