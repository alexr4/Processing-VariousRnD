import org.gradle.internal.jvm.Jvm

import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'java-library'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
}

archivesBaseName = 'devolay'

sourceCompatibility = 1.8

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

// Load keys.properties and configure bintray for deploy
final Properties keysProperties = new Properties()
if(project.file("keys.properties").exists()) {
    new FileReader(project.file("keys.properties")).with( { reader ->
        keysProperties.load(reader)
    })
}

System.out.println(keysProperties.getProperty("bintray_user"))

bintray {
    user = keysProperties.getProperty("bintray_user")
    key = keysProperties.getProperty("bintray_api_key")
    pkg {
        repo = 'devolay'
        name = 'devolay'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/WalkerKnapp/devolay.git'

        version {
            name = project.version
            desc = 'Devolay Library ' + project.version + ' Release'
            released = new Date()
            vcsTag = 'v' + project.version
        }
    }
    publications = ['Devolay']
}

publishing {
    publications {
        Devolay(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar

            groupId groupId
            artifactId = 'devolay'
            version version

            pom {
                name = "devolay"
                description = "A Java binding for the Newtek NDI(tm) SDK."
                url = "https://github.com/WalkerKnapp/devolay"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "WalkerKnapp"
                        name = "Walker Knapp"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/WalkerKnapp/devolay.git"
                    developerConnection = "scm:git:git@github.com:WalkerKnapp/devolay.git"
                    url = "https://github.com/WalkerKnapp/devolay"
                }
            }
        }
    }
}

task generateJniHeaders(type: Exec, description: 'Generates C headers for JNI by running javah', group: 'build') {
    def nativeIncludes = "../devolay-natives/src/main/headers"

    ArrayList<String> javacCommand = new ArrayList<String>()
    javacCommand.add(Jvm.current().javacExecutable.toString())
    javacCommand.add("-d")
    javacCommand.add("build/tmp/generateJniHeaders")
    javacCommand.add("-h")
    javacCommand.add(nativeIncludes)

    sourceSets.main.allJava.forEach({ sourceFile ->
        javacCommand.add(sourceFile.toPath().toAbsolutePath().toString())
    })

    commandLine javacCommand.toArray()
}

processResources {
    dependsOn ":devolay-natives:assemble"
}

sourceSets {
    main {
        resources {
            srcDirs 'src/main/resources', project(":devolay-natives").buildDir.getAbsolutePath() + '/lib/main/debug'
        }
    }
}
